[{"authors":["admin"],"categories":null,"content":"Kelsey E. Gonzalez is a PhD Candidate in the School of Sociology at the University of Arizona. Her research focuses on computational methods, advanced statistical methods, and social networks analysis in connection to thematic interests in social networks, social support, medical sociology, and racial and panethnic identities.\nKelsey has a strong methodological background following her extensive quantitative and computational methods training at the University of Arizona. She collaborates with Corey Abramson uncovering the economic, educational and health-related outcomes of weight status, with Daniel Martinez investigating racial and ethnic identities of Latinos in the United States, and with Terrence Hill researching white fragility and individual responses to Covid-19.\nKelsey’s work appears in Ethnic and Racial Studies, Sociological Perspectives, Journal on Migration and Human Security, and the Journal of Religion and Health.\nKelsey received her MA in Sociology from the University of Arizona in 2018 where she investigated the impacts of personal networks and homophily on individuals’ perceptions of discrimination. Before coming to the University of Arizona, she earned her MPhil in Race, Ethnicity and Conflict from the Department of Sociology at Trinity College, Dublin in 2015.\nDownload my CV.\n","date":1596844800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1596844800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/kelsey-e.-gonzalez/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/kelsey-e.-gonzalez/","section":"authors","summary":"Kelsey E. Gonzalez is a PhD Candidate in the School of Sociology at the University of Arizona. Her research focuses on computational methods, advanced statistical methods, and social networks analysis in connection to thematic interests in social networks, social support, medical sociology, and racial and panethnic identities.","tags":null,"title":"Kelsey E. Gonzalez","type":"authors"},{"authors":["Daniel E. Martínez","Kelsey E. Gonzalez"],"categories":null,"content":"","date":1596844800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596844800,"objectID":"5b7e1a21997b426300172aac7367a9f1","permalink":"/publication/latinohispanic/","publishdate":"2020-08-08T00:00:00Z","relpermalink":"/publication/latinohispanic/","section":"publication","summary":"Despite different origins, “Hispanic” and “Latino” are often used interchangeably to describe people with Latin American ancestry in the United States. Nevertheless, research consistently finds around half of US Latinos/Hispanics prefer one term over the other. What factors explain these differences and account for no preference at all? Drawing on the 2013 National Survey of Latinos, we find college graduates, non-Mexicans, and first- and second-generation immigrants, and respondents in the western United States have higher relative odds of preferring “Latino” over “Hispanic.” Those who identify racially as “Hispanic/Latino” also opt for “Latino,” suggesting it is associated with racialization in the US context. Conversely, gender, citizenship status, language use, and political affiliation do not explain specific panethnic label preference.. We employ several theoretical approaches to provide insight on these findings, including (neo)colonization and internal colonialism, assimilation and racialization, and consciousness-raising.","tags":["Source Themes"],"title":"Latino or Hispanic?: The Sociodemographic Correlates of Panethnic Label Preferences among US Latinos/Hispanics","type":"publication"},{"authors":null,"categories":null,"content":"","date":1594684800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594684800,"objectID":"f2f558d7292ee3673984b7931441120d","permalink":"/course/soc303/soc303/","publishdate":"2020-07-14T00:00:00Z","relpermalink":"/course/soc303/soc303/","section":"course","summary":"Introduction to Sociology","tags":["Demo"],"title":"Soc / Chs 303: Health \u0026 Society","type":"course"},{"authors":["Terrence D. Hill","Kelsey E. Gonzalez","Amy M. Burdette"],"categories":null,"content":"","date":1593820800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593820800,"objectID":"98c667b01875bc32c6a2ec6e2fcad7d9","permalink":"/publication/religiositycoronavirus/","publishdate":"2020-07-04T00:00:00Z","relpermalink":"/publication/religiositycoronavirus/","section":"publication","summary":"This paper examines the association between state religiosity and population mobility during the coronavirus (COVID-19) pandemic. We use first-party geo-behavioral data collected through mobile phone operating systems, global positioning systems, and Wi-Fi signals to assess changes in the average median distance traveled by approximately 15,000,000 devices over eight weeks (February 24–April 13) in the contiguous United States. Robust regression results show that more religious states tend to exhibit higher average mobility scores and slower average declines in mobility. Findings also suggest that state stay-at-home orders have a weaker impact on mobility in more religious states.","tags":null,"title":"The Blood of Christ Compels Them: State Religiosity and State Population Mobility During the Coronavirus (COVID-19) Pandemic","type":"publication"},{"authors":null,"categories":["R"],"content":" About This is a short 1 hour and 45 minutes introduction to R and the tidyverse prepared and delivered by Kelsey Gonzalez for BIO5 Institute’s KEYS (Keep Engaging Youth in Science) Research Internship Program on June 10, 2020.\nA PDF of this lesson is available here\nThis lesson is largely adapted from Software and Data Carpentry materials by Kelsey Gonzalez for use with the Penguins dataset.\n Getting set up R works by having a base programming language that can be added on to with community-created open-source extensions called packages. We’re going to first install two packages that we will work with today.\ninstall.packages(\u0026quot;tidyverse\u0026quot;) install.packages(\u0026quot;palmerpenguins\u0026quot;) library(tidyverse) library(palmerpenguins) What is an R package? An R package is a complete unit for sharing code with others. Each R package contains the code for a set of R functions, the documentation (or description) for each of the functions, as well as a practice dataset to learn the functions on.\nGenerally, each R package is built with a specific task in mind. For instance, the package dplyr provides easy tools for the most common data manipulation tasks. It is built to work directly with data frames, with many common tasks optimized by being written in a compiled language (C++) (not all R packages are written in R!).\nBut there are also packages available for a wide range of tasks including building plots (ggplot2, which we’ll see later), downloading data from the NCBI database, or performing statistical analysis on your data set. Many packages such as these are housed on, and downloadable from, the Comprehensive R Archive Network (CRAN) using install.packages. This function makes the package accessible by your R installation with the command library(), as you did with tidyverse earlier.\nTo easily access the documentation for a package within R or RStudio, use help(package = \"package_name\").\nLet’s first load the data we’ll be using today, which contains observations for 3 penguin species on islands in the Palmer Archipelago, Antarctica. More information about this dataset can be found at github.com/allisonhorst/penguins.\nWe only have a short lesson today, so I won’t get into the specifics on what we’re doing here. Just know we loaded a package called penguins above which contained a dataset called penguins. By calling data(), we’re asking r to load a dataset that is in the package. R also can read csv files, excel files, and many other data types.\ndata(penguins)   Data Wrangling \u0026amp; visualization: adapted from: https://datacarpentry.org/r-socialsci/03-dplyr-tidyr/index.html\nquestions:\n How can I select specific rows and/or columns from a data frame?\n How can I combine multiple commands into a single command?\n How can create new columns or remove existing columns from a data frame?\n How can I reformat a dataframe to meet my needs?  objectives:\n Describe the purpose of an R package and the dplyr and tidyr packages.\n Select certain columns in a data frame with the dplyr function select.\n Select certain rows in a data frame according to filtering conditions with the dplyr function filter.\n Link the output of one dplyr function to the input of another function with the ‘pipe’ operator %\u0026gt;%.\n Add new columns to a data frame that are functions of existing columns with mutate.\n Use the split-apply-combine concept for data analysis.\n Use summarize, group_by, and count to split a data frame into groups of observations, apply a summary statistics for each group, and then combine the results.\n Describe the concept of a wide and a long table format and for which purpose those formats are useful. Describe what key-value pairs are.\n Reshape a data frame from long to wide format and back with the spread and gather commands from the tidyr package.\n Export a data frame to a csv file.  keypoints:\n Use the dplyr package to manipulate dataframes.\n Use select() to choose variables from a dataframe.\n Use filter() to choose data based on values.\n Use group_by() and summarize() to work with subsets of data.\n Use mutate() to create new variables.\n Use the tidyr package to change the layout of dataframes.  Data Manipulation using dplyr dplyr is a package for making tabular data manipulation easier by using a limited set of functions that can be combined to extract and summarize insights from your data.\nSimilarly to readr, dplyr and tidyr are also part of the tidyverse. These packages were loaded in R’s memory when we called library(tidyverse) earlier.\nTo learn more about dplyr after the workshop, you may want to check out this handy data transformation with dplyr cheatsheet.\nWe’re going to learn some of the most common dplyr functions:\n select(): subset columns filter(): subset rows on conditions mutate(): create new columns by using information from other columns group_by() and summarize(): create summary statistics on grouped data arrange(): sort results   Explore our data Let’s explore our data first. There’s 7 variables or columns that we have to work with.\n species: penguin species (Chinstrap, Adélie, or Gentoo) bill_length_mm: bill length (mm) bill_depth_mm: bill depth (mm) flipper_length_mm: flipper length (mm) body_mass_g: body mass (g) island: island name (Dream, Torgersen, or Biscoe) in the Palmer Archipelago (Antarctica) sex: penguin sex  Here’s what the three penguins species look like in real life:\nWe have a few options to preview our dataframe. My favorite is glimpse()\nglimpse(penguins) You can also View() the data, which opens the data in a R Studio viewer pane. Note the capital V.\nView(penguins)  Selecting columns and filtering rows To select columns of a data frame, use select(). The first argument to this function is the data frame (penguins), and the subsequent arguments are the columns to keep.\nselect(penguins, species, body_mass_g, sex) To choose rows based on a specific criteria, use filter():\nfilter(penguins, island == \u0026quot;Biscoe\u0026quot;) The filter function works with most boolean operators, namely:\n  Operator Description    \u0026lt; less than  \u0026lt;= less than or equal to  \u0026gt; greater than  \u0026gt;= greater than or equal to  == exactly equal to  != not equal to  !x Not x  x | y x OR y  x \u0026amp; y x AND y  isTRUE(x) test if X is TRUE     Pipes What if you want to select and filter at the same time? There are three ways to do this: use intermediate steps, nested functions, or pipes.\nWith intermediate steps, you create a temporary data frame and use that as input to the next function, like this:\npenguins_biscoe \u0026lt;- filter(penguins, island == \u0026quot;Biscoe\u0026quot;) penguins_biscoe \u0026lt;- select(penguins_biscoe, species, body_mass_g, sex) This is readable, but can clutter up your workspace with lots of objects that you have to name individually. With multiple steps, that can be hard to keep track of.\nYou can also nest functions (i.e. one function inside of another), like this:\npenguins_Biscoe \u0026lt;- select(filter(penguins, island == \u0026quot;Biscoe\u0026quot;), species, body_mass_g, sex) This is handy, but can be difficult to read if too many functions are nested, as R evaluates the expression from the inside out (in this case, filtering, then selecting).\nThe last option, pipes, are a powerful addition to R. Pipes let you take the output of one function and send it directly to the next, which is useful when you need to do many things to the same dataset. Pipes in R look like %\u0026gt;% and are made available via the magrittr package, installed automatically with dplyr. If you use RStudio, you can type the pipe with Ctrl + Shift + M if you have a PC or Cmd + Shift + M if you have a Mac.\npenguins %\u0026gt;% filter(island == \u0026quot;Biscoe\u0026quot;) %\u0026gt;% select(species, body_mass_g, sex) ## # A tibble: 168 x 3 ## species body_mass_g sex ## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; ## 1 Adelie 3400 female ## 2 Adelie 3600 male ## 3 Adelie 3800 female ## 4 Adelie 3950 male ## 5 Adelie 3800 male ## 6 Adelie 3800 female ## 7 Adelie 3550 male ## 8 Adelie 3200 female ## 9 Adelie 3150 female ## 10 Adelie 3950 male ## # … with 158 more rows In the above code, we use the pipe to send the penguins dataset first through filter() to keep rows where island is “Biscoe”, then through select() to keep only the species, body_mass_g,and sex columns. Since %\u0026gt;% takes the object on its left and passes it as the first argument to the function on its right, we don’t need to explicitly include the data frame as an argument to the filter() and select() functions any more.\nSome may find it helpful to read the pipe like the word “then”. For instance, in the above example, we take the data frame penguins, then we filter for rows with island == \"Biscoe\", then we select columns species, body_mass_g,and sex. The dplyr functions by themselves are somewhat simple, but by combining them into linear workflows with the pipe, we can accomplish more complex manipulations of data frames.\nIf we want to create a new object with this smaller version of the data, we can assign it a new name:\npenguins_biscoe \u0026lt;- penguins %\u0026gt;% filter(island == \u0026quot;Biscoe\u0026quot;) %\u0026gt;% select(species, body_mass_g, sex) penguins_biscoe ## # A tibble: 168 x 3 ## species body_mass_g sex ## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; ## 1 Adelie 3400 female ## 2 Adelie 3600 male ## 3 Adelie 3800 female ## 4 Adelie 3950 male ## 5 Adelie 3800 male ## 6 Adelie 3800 female ## 7 Adelie 3550 male ## 8 Adelie 3200 female ## 9 Adelie 3150 female ## 10 Adelie 3950 male ## # … with 158 more rows Note that the final data frame (penguins_biscoe) is the leftmost part of this expression becuase it is receiving an assignment.\n Exercise Using pipes, subset the penguins data to include all species EXCEPT Adelie and retain the species column in addition to those relating to their bill. ## Solution\n penguins %\u0026gt;% filter(species != \u0026quot;Adelie\u0026quot;) %\u0026gt;% select(bill_length_mm, bill_depth_mm) Mutate Frequently you’ll want to create new columns based on the values in existing columns, for example to do unit conversions, or to find the ratio of values in two columns. For this we’ll use mutate().\nWe might be interested in the flipper length of penguins in cm instead of milimeters:\npenguins %\u0026gt;% mutate(flipper_length_cm = flipper_length_mm / 10) ## # A tibble: 344 x 9 ## species island bill_length_mm bill_depth_mm flipper_length_… body_mass_g ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 Adelie Torge… 39.1 18.7 181 3750 ## 2 Adelie Torge… 39.5 17.4 186 3800 ## 3 Adelie Torge… 40.3 18 195 3250 ## 4 Adelie Torge… NA NA NA NA ## 5 Adelie Torge… 36.7 19.3 193 3450 ## 6 Adelie Torge… 39.3 20.6 190 3650 ## 7 Adelie Torge… 38.9 17.8 181 3625 ## 8 Adelie Torge… 39.2 19.6 195 4675 ## 9 Adelie Torge… 34.1 18.1 193 3475 ## 10 Adelie Torge… 42 20.2 190 4250 ## # … with 334 more rows, and 3 more variables: sex \u0026lt;fct\u0026gt;, year \u0026lt;int\u0026gt;, ## # flipper_length_cm \u0026lt;dbl\u0026gt; We may be interested in investigating whether being a member of an irrigation association had any effect on the ratio of household members to rooms. To look at this relationship, we will first remove data from our dataset where the respondent didn’t answer the question of whether they were a member of an irrigation association. These cases are recorded as “NULL” in the dataset.\n Exercise Create a new data frame from the penguins data that meets the following criteria: contains only the species column and a new column called body_mass_kg containing a transformed body_mass_g. Only the rows where body_mass_kg is greater than 4 should be shown in the final data frame. How many rows do you have? \nHint: think about how the commands should be ordered to produce this data frame!\nSolution  penguins_large \u0026lt;- penguins %\u0026gt;% mutate(body_mass_kg = body_mass_g / 1000) %\u0026gt;% filter(body_mass_kg \u0026gt; 4) %\u0026gt;% select(species, body_mass_kg)  Split-apply-combine data analysis and the summarize() function Many data analysis tasks can be approached using the split-apply-combine paradigm: split the data into groups, apply some analysis to each group, and then combine the results. dplyr makes this very easy through the use of the group_by() function.\nThe summarize() function group_by() is often used together with summarize(), which collapses each group into a single-row summary of that group. group_by() takes as arguments the column names that contain the categorical variables for which you want to calculate the summary statistics. So to compute the average household size by island:\npenguins %\u0026gt;% group_by(island) %\u0026gt;% summarize(mean_flipper_length_mm = mean(flipper_length_mm)) ## # A tibble: 3 x 2 ## island mean_flipper_length_mm ## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Biscoe NA ## 2 Dream 193. ## 3 Torgersen NA You may also have noticed that the output has a lot of NA! When R does calculations with missing data, it (correctly) doesn’t know how to evaluate them and forces the result to NA. to solve this, we need to add in a special option to tell R that we want to ignore the missing values.\nUse the ? function on mean() to figure out what this option is.\npenguins %\u0026gt;% group_by(island) %\u0026gt;% summarize(mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE)) ## # A tibble: 3 x 2 ## island mean_flipper_length_mm ## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Biscoe 210. ## 2 Dream 193. ## 3 Torgersen 191. You can also group by multiple columns:\npenguins %\u0026gt;% group_by(island, species) %\u0026gt;% summarize(mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE)) ## # A tibble: 5 x 3 ## # Groups: island [3] ## island species mean_flipper_length_mm ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Biscoe Adelie 189. ## 2 Biscoe Gentoo 217. ## 3 Dream Adelie 190. ## 4 Dream Chinstrap 196. ## 5 Torgersen Adelie 191. I expected to get 9 rows because we have 3 islands and 3 species of penguin. What do you think is going on here?\nOnce the data are grouped, you can also summarize multiple variables at the same time (and not necessarily on the same variable). For instance, we could add a column indicating the minimum and maximum flipper length for each island for each species:\npenguins %\u0026gt;% group_by(island, species) %\u0026gt;% summarize(mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE), min_flipper_length_mm = min(flipper_length_mm, na.rm = TRUE), max_flipper_length_mm = max(flipper_length_mm, na.rm = TRUE)) ## # A tibble: 5 x 5 ## # Groups: island [3] ## island species mean_flipper_lengt… min_flipper_length… max_flipper_length… ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 Biscoe Adelie 189. 172 203 ## 2 Biscoe Gentoo 217. 203 231 ## 3 Dream Adelie 190. 178 208 ## 4 Dream Chinstrap 196. 178 212 ## 5 Torgers… Adelie 191. 176 210 It is sometimes useful to rearrange the result of a query to inspect the values. For instance, we can sort on mean_flipper_length_mm to put the group with the shortest flippers first:\npenguins %\u0026gt;% group_by(island, species) %\u0026gt;% summarize(mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE), min_flipper_length_mm = min(flipper_length_mm, na.rm = TRUE), max_flipper_length_mm = max(flipper_length_mm, na.rm = TRUE)) %\u0026gt;% arrange(mean_flipper_length_mm) ## # A tibble: 5 x 5 ## # Groups: island [3] ## island species mean_flipper_lengt… min_flipper_length… max_flipper_length… ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 Biscoe Adelie 189. 172 203 ## 2 Dream Adelie 190. 178 208 ## 3 Torgers… Adelie 191. 176 210 ## 4 Dream Chinstrap 196. 178 212 ## 5 Biscoe Gentoo 217. 203 231 To sort in descending order, we need to add the desc() function.\npenguins %\u0026gt;% group_by(island, species) %\u0026gt;% summarize(mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE), min_flipper_length_mm = min(flipper_length_mm, na.rm = TRUE), max_flipper_length_mm = max(flipper_length_mm, na.rm = TRUE)) %\u0026gt;% arrange(desc(mean_flipper_length_mm)) ## # A tibble: 5 x 5 ## # Groups: island [3] ## island species mean_flipper_lengt… min_flipper_length… max_flipper_length… ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 Biscoe Gentoo 217. 203 231 ## 2 Dream Chinstrap 196. 178 212 ## 3 Torgers… Adelie 191. 176 210 ## 4 Dream Adelie 190. 178 208 ## 5 Biscoe Adelie 189. 172 203  Exercise: Use group_by() and summarize() to find the mean bill_length and bill_depth each species.\nSolution  penguins %\u0026gt;% group_by(species) %\u0026gt;% summarize( mean_bill_length = mean(bill_length_mm, na.rm = TRUE), mean_bill_depth = mean(bill_depth_mm, na.rm = TRUE) )     Data Visualization adapted from: https://datacarpentry.org/r-socialsci/04-ggplot2/index.html\nquestions:\n What are the components of a ggplot?\n How do I create scatterplots, boxplots, and barplots?\n How can I change the aesthetics (ex. colour, transparency) of my plot?\n How can I create multiple plots at once?  objectives:\n Produce scatter plots, boxplots, and time series plots using ggplot.\n Set universal plot settings.\n Describe what faceting is and apply faceting in ggplot.\n Modify the aesthetics of an existing ggplot plot (including axis labels and color).\n Build complex and customized plots from data in a data frame.  keypoints:\n ggplot2 is a flexible and useful tool for creating plots in R.\n The data set and coordinate system can be defined using the ggplot function.\n Additional layers, including geoms, are added using the + operator.\n Boxplots are useful for visualizing the distribution of a continuous variable.\n Barplot are useful for visualizing categorical data.\n Faceting allows you to generate multiple plots based on a categorical variable.  Plotting with ggplot2 ggplot2 is a plotting package that makes it simple to create complex plots from data stored in a data frame. It provides a programmatic interface for specifying what variables to plot, how they are displayed, and general visual properties. Therefore, we only need minimal changes if the underlying data change or if we decide to change from a bar plot to a scatterplot. This helps in creating publication quality plots with minimal amounts of adjustments and tweaking.\nggplot graphics are built step by step by adding new elements. Adding layers in this fashion allows for extensive flexibility and customization of plots.\nTo learn more about ggplot2 after the workshop, you may want to check out this handy data transformation with ggplot2 cheatsheet.\nTo build a ggplot, we will use the following basic template that can be used for different types of plots:\nggplot(data = \u0026lt;DATA\u0026gt;, mapping = aes(\u0026lt;MAPPINGS\u0026gt;)) + \u0026lt;GEOM_FUNCTION\u0026gt;()  use the ggplot() function and bind the plot to a specific data frame using the data argument  ggplot(data = penguins)  define a mapping (using the aesthetic (aes) function), by selecting the variables to be plotted and specifying how to present them in the graph, e.g. as x/y positions or characteristics such as size, shape, color, etc.  ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)  add ‘geoms’ – graphical representations of the data in the plot (points, lines, bars). ggplot2 offers many different geoms; we will use some common ones today, including:\n geom_point() for scatter plots, dot plots, etc.\n geom_boxplot() for, well, boxplots!\n geom_line() for trend lines, time series, etc.\n  To add a geom to the plot use the + operator. Because we have two continuous variables, let’s use geom_point() first:\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) + geom_point() The + in the ggplot2 package is particularly useful because it allows you to modify existing ggplot objects. This means you can easily set up plot templates and conveniently explore different types of plots, so the above plot can also be generated with code like this:\n# Assign plot to a variable penguins_plot \u0026lt;- ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) # Draw the plot penguins_plot + geom_point()  Notes  Anything you put in the ggplot() function can be seen by any geom layers that you add (i.e., these are universal plot settings). This includes the x- and y-axis mapping you set up in aes(). You can also specify mappings for a given geom independently of the mapping defined globally in the ggplot() function. The + sign used to add new layers must be placed at the end of the line containing the previous layer. If, instead, the + sign is added at the beginning of the line containing the new layer, ggplot2 will not add the new layer and will return an error message.   ## This is the correct syntax for adding layers penguins_plot + geom_point() ## This will not add the new layer and will return an error message penguins_plot + geom_point()  Building your plots iteratively Building plots with ggplot2 is typically an iterative process. We start by defining the dataset we’ll use, lay out the axes, and choose a geom:\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) + geom_point() Then, we start modifying this plot to extract more information from it. For instance, we can add transparency (alpha) to avoid overplotting:\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) + geom_point(alpha = 0.5) That only helped a little bit with the overplotting problem. We can also introduce a little bit of randomness into the position of our points using the geom_jitter() function.\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) + geom_jitter(alpha = 0.5) We can also add colors for all the points:\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) + geom_jitter(alpha = 0.5, color = \u0026quot;blue\u0026quot;) Or to color each species in the plot differently, you could use a vector as an input to the argument color. Because we are now mapping features of the data to a color, instead of setting one color for all points, the color now needs to be set inside a call to the aes function. ggplot2 will provide a different color corresponding to different values in the vector. We set the value of alpha outside of the aes function call because we are using the same value for all points. Here is an example where we color by island:\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) + geom_jitter(aes(color = species), alpha = 0.5) There appears to be a positive trend between flipper length and body massof penguins. This trend does not appear to be different by species, but we can see that Chinstrap and Adelie penguins have shorter flippers and small body mass than Gentoo.\n Adding Labels and Titles By default, the axes labels on a plot are determined by the name of the variable being plotted. However, ggplot2 offers lots of customization options, like specifying the axes labels, and adding a title to the plot with relatively few lines of code. We will add more informative x and y axis labels to our plot of proportion of house type by island and also add a title.\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) + geom_jitter(aes(color = species), alpha = 0.5) + labs(title=\u0026quot;Body Mass by Flipper Length\u0026quot;, x=\u0026quot;Flipper Length (mm)\u0026quot;, y=\u0026quot;Body Mass (g)\u0026quot;)  Exercise Use what you just learned to create a scatter plot of bill_length_mm by species with the sex showing in different colors. Is this a good way to show this type of data?\nSolution  ggplot(data = penguins, aes(x = species, y = bill_length_mm)) + geom_jitter(aes(color = sex)) This is not a good way to show this type of data because it is difficult to distinguish between islands.\n Boxplot We can use boxplots to visualize the distribution of rooms for each wall type:\nggplot(data = penguins, aes(x = species, y = bill_length_mm)) + geom_boxplot() By adding points to a boxplot, we can have a better idea of the number of measurements and of their distribution:\nggplot(data = penguins, aes(x = species, y = bill_length_mm)) + geom_boxplot(alpha = 0) + geom_jitter(alpha = 0.5, color = \u0026quot;tomato\u0026quot;) We can see that Adelie penguins tend to have shorter bills than other species.\nNotice how the boxplot layer is behind the jitter layer? What do you need to change in the code to put the boxplot in front of the points such that it’s not covered?\n Exercise Boxplots are useful summaries, but hide the shape of the distribution. For example, if the distribution is bimodal, we would not see it in a boxplot. An alternative to the boxplot is the violin plot, where the shape (of the density of points) is drawn.\n Replace the box plot with a violin plot; see geom_violin().  Solution  ggplot(data = penguins, aes(x = species, y = bill_length_mm)) + geom_violin(alpha = 0) + geom_jitter(alpha = 0.5, color = \u0026quot;tomato\u0026quot;)  Barplots Barplots are also useful for visualizing categorical data. By default, geom_bar accepts a variable for x, and plots the number of instances each value of x (in this case, wall type) appears in the dataset.\nggplot(data = penguins, aes(x = island)) + geom_bar() We can use the fill aesthetic for the geom_bar() geom to color bars by the portion of each count that is from each island.\nggplot(data = penguins, aes(x = island)) + geom_bar(aes(fill = species)) This creates a stacked bar chart. These are generally more difficult to read than side-by-side bars. We can separate the portions of the stacked bar that correspond to each island and put them side-by-side by using the position argument for geom_bar() and setting it to “dodge”.\nggplot(data = penguins, aes(x = island)) + geom_bar(aes(fill = species), position = \u0026quot;dodge\u0026quot;)  ggplot2 themes In addition to theme_bw(), which changes the plot background to white, ggplot2 comes with several other themes which can be useful to quickly change the look of your visualization. The complete list of themes is available at http://docs.ggplot2.org/current/ggtheme.html. theme_minimal() and theme_light() are popular, and theme_void() can be useful as a starting point to create a new hand-crafted theme.\nThe ggthemes package provides a wide variety of options (including an Excel 2003 theme). The ggplot2 extensions website provides a list of packages that extend the capabilities of ggplot2, including additional themes.\n Customization Take a look at the ggplot2 cheat sheet, and think of ways you could improve the plot.\n Exercise With all of this information in hand, please take another five minutes to either improve one of the plots generated in this exercise or create a beautiful graph of your own.\n See if you can make the bars white with black outline. Try using a different color palette (see http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/).     ","date":1591798394,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591798394,"objectID":"e678e890e0ac80d969a402ed11016248","permalink":"/post/2020-06-10-keys/2020-06-10-keys-r-workshop/","publishdate":"2020-06-10T09:13:14-05:00","relpermalink":"/post/2020-06-10-keys/2020-06-10-keys-r-workshop/","section":"post","summary":"About This is a short 1 hour and 45 minutes introduction to R and the tidyverse prepared and delivered by Kelsey Gonzalez for BIO5 Institute’s KEYS (Keep Engaging Youth in Science) Research Internship Program on June 10, 2020.","tags":["Workshop"],"title":"KEYS R workshop","type":"post"},{"authors":null,"categories":["R"],"content":" Animating your ggplots may sound daunting. However, you have to add a line or two extra of code and you have an animation! gganimate makes animation quite accessible for users of ggplot.\nA cheat sheet for what we’ll cover today:\n Types of Transitions  transition_reveal() (good for mainly geom_line) transition_states() (good for geom_point, geom_bar, geom_col, etc)  splits up plot data by a discrete variable and animates between the different states.  transition_time() (geom_point)  Instead of transitioning over a discrete variable, the transition occurs over a continuous variable (Time)\n   Some extras  shadow_mark()  This shadow lets you show the raw data behind the current frame. Both past and/or future raw data can be shown and styled as you want.\n  shadow_wake()  instead of leaving a more permanent mark, wake leaves a tail to show direction, but only reveals the past few states\n  view_follow(fixed_y = TRUE)  controls how your viewport changes as the transition occurs\n  anim_save()  It works much like ggsave() from ggplot2 and automatically grabs the last rendered animation if you do not specify one directly.    Let’s load back up our data from the previous lessons on R by Adriana Picoral (picoral.github.io/resbaz_intro_to_r/parti.html) and from Kathryn Busby on ggplot2. I’ll name the dataframe avocado because I can’t remember what the other instructors named their data. We will also load our packages here.\nlibrary(tidyverse) # install.packages(\u0026quot;gganimate\u0026quot;) library(gganimate) # install.packages(\u0026quot;scales\u0026quot;) library(scales) avocado \u0026lt;- read_csv(\u0026quot;avocado.csv\u0026quot;) Avocado data is originally from www.kaggle.com/neuromusic/avocado-prices/data and included in the link about to make downloading easier.\nLet’s explore our data a little bit..\nglimpse(avocado) summary(avocado) class(avocado$Date) #make sure `Date` is actually a date type unique(avocado$region)# what type of regions are included here? You’ll notice that our region variable is kind of all over the place. Because I’ve reviewed this before, I know we need to separate out the US level, states, regions, and cities so our graphs are on the same level.\navocado_us \u0026lt;- avocado %\u0026gt;% filter(region == \u0026quot;TotalUS\u0026quot;) states \u0026lt;- c(\u0026quot;California\u0026quot;) avocado_CA \u0026lt;- avocado %\u0026gt;% filter(region %in% states) regions \u0026lt;- c(\u0026quot;West\u0026quot;,\u0026quot;Southeast\u0026quot;,\u0026quot;SouthCentral\u0026quot;,\u0026quot;Plains\u0026quot;,\u0026quot;Northeast\u0026quot;,\u0026quot;Midsouth\u0026quot;,\u0026quot;GreatLakes\u0026quot;,\u0026quot;WestTexNewMexico\u0026quot;,\u0026quot;NorthernNewEngland\u0026quot;) avocado_region \u0026lt;- avocado %\u0026gt;% filter(region %in% regions) avocado_cities \u0026lt;- avocado %\u0026gt;% filter(!region %in% c(\u0026quot;TotalUS\u0026quot;, states, regions)) We’re finally ready to make some plots, and then build the animation into these plots.\ntransition_reveal() This type of transition is the simplest and acts like a piece of paper is being removed from left to right over the top of the graph to slowly reveal the result. That’s how I think about it, at least. This assume that your x axis is also what is included inside your statement transition_reveal().\nFor this, let’s first build a static line plot that has date on the x-axis. Looking through the data, we could use AveragePrice or Total Volume on the y axis, and we could disaggregate by region, size of avocado, or type (organic versus conventional).\nLet’s stick to the totalUS aggregation dataset we made (avocado_us) and look at the average price of conventional and organic avocados over time.\nggplot(data = avocado_us, mapping = aes(x = Date, y = AveragePrice, color = type)) + geom_line() If we feel good on time, we can make a few adjustments to the plot before animating it.\nggplot(data = avocado_us, mapping = aes(x = Date, y = AveragePrice, color = type)) + geom_line() + scale_y_continuous(labels = scales::dollar_format()) + # format that y axis! scale_color_manual(values= c(\u0026quot;darkgreen\u0026quot;, \u0026quot;darkolivegreen3\u0026quot;)) + theme_minimal() + labs(title = \u0026quot;Average Price of US Avocados\u0026quot;, caption = \u0026quot;Source: Kaggle\u0026quot;) This looks a lot better. I one what happened the summer of 2015! Now let’s animate this. The key to this animation is transition_reveal(). Inside of the function, we can write out x axis variable. While it will take a few moments to render, you should see an animated plot in your plots pane.\nggplot(data = avocado_us, mapping = aes(x = Date, y = AveragePrice, color = type)) + geom_line() + scale_y_continuous(labels = scales::dollar_format()) + # format that y axis! scale_color_manual(values= c(\u0026quot;darkgreen\u0026quot;, \u0026quot;darkolivegreen3\u0026quot;)) + theme_minimal() + labs(title = \u0026quot;Average Price of US Avocados\u0026quot;, caption = \u0026quot;Source: Kaggle\u0026quot;) + transition_reveal(Date) Let’s also save this, since each time we run the code it takes some time.\nanim_save(filename = \u0026quot;type_reveal.gif\u0026quot;) Challenge Take a few minutes to try and plot the changes in total volume of organic avocados across time for the different regions of the USA.\n  transition_time() Transition time creates new “layers” of the animation over a continous variable, usually time (i’ve never seen an exception to that). While this works best with geom_point, there’s many other options you can play around with.\nLet’s use two continous variables to plot this. Let’s see how well price explains the volume sold of avocados for non-organic avocados (though, it’s been awhile since I took Econ101). Let’s do this for the different cities in the US, omitting states and regions.\navocado_cities_filtered \u0026lt;- avocado_cities %\u0026gt;% filter(type == \u0026quot;conventional\u0026quot;, Date \u0026gt; as.Date(\u0026quot;2018-01-01\u0026quot;)) ggplot(data = avocado_cities_filtered, mapping = aes(x = AveragePrice, y = `Total Volume`, color = region)) + geom_point() That legend is really going to get in the way. Let’s remove it and customize the circles before animating.\nggplot(data = avocado_cities_filtered, mapping = aes(x = AveragePrice, y = `Total Volume`, color = region)) + scale_y_continuous(labels = scales::comma_format()) + scale_x_continuous(labels = scales::dollar_format()) + geom_point(aes(size = `Total Volume`), alpha = .6) + theme_minimal() + theme(legend.position = \u0026quot;none\u0026quot;) + labs(title = \u0026quot;Avocados sold by price and city\u0026quot;)  In practice, the animation is basically layering a bunch of plots on top of each other, as if they were facet_wraps. When I’m planning out an animation, I often use facet_wrap like you learned this morning to see the different layers before I “assemble” them.\nggplot(data = avocado_cities_filtered, mapping = aes(x = AveragePrice, y = `Total Volume`, color = region)) + scale_y_continuous(labels = scales::comma_format()) + scale_x_continuous(labels = scales::dollar_format()) + geom_point(aes(size = `Total Volume`), alpha = .6) + theme_minimal() + theme(legend.position = \u0026quot;none\u0026quot;) + labs(title = \u0026quot;Avocados sold by price and city\u0026quot;) + facet_wrap(~Date) Now we can move on to animating this. transition_time() will replace the previous dot, making it hard to see any trends. Let’s add shadow_wake so we can see the direction between points.\nOne really cool trick I like to employ is writing in the subtitle what point in time we’re currently animating. Before it didn’t really matter because the date was on the x axis, but not its hidden. For that, we need to add some {} in the subtitle argument of labs.\nggplot(data = avocado_cities_filtered, mapping = aes(x = AveragePrice, y = `Total Volume`, color = region)) + scale_y_continuous(labels = scales::comma_format()) + scale_x_continuous(labels = scales::dollar_format()) + geom_point(aes(size = `Total Volume`), alpha = .6) + theme_minimal() + theme(legend.position = \u0026quot;none\u0026quot;) + labs(title = \u0026quot;Avocados sold by price and city\u0026quot;, subtitle = \u0026quot;Date: {frame_time}\u0026quot;) + transition_time(Date) + shadow_wake(wake_length = 0.2)  Let’s also save this, since each time we run the code it takes some time.\nanim_save(filename = \u0026quot;type_time.gif\u0026quot;) Challenge Can you use transition_time to show how the price of organic avocados change over time for California?\n  transition_state() Transition_state() creates a new animation layer across a categorical variable instead of over time.\navocado_region_long \u0026lt;- avocado_region %\u0026gt;% pivot_longer(cols = c(`4046`,`4225`,`4770`), names_to = \u0026quot;size\u0026quot;, values_to = \u0026quot;volume\u0026quot;) ggplot(data = avocado_region_long, mapping = aes(x = size, y = volume, color = size)) + geom_boxplot()  Let’s customize this a little to make it look nicer.\nggplot(data = avocado_region_long, mapping = aes(x = size, y = volume, color = size)) + geom_boxplot() + theme_classic() + scale_y_continuous(labels = scales::comma_format()) + labs(title = \u0026quot;Boxplot of volume sold by Avocado Size\u0026quot;) It isn’t particularly helpful that the previous view completely dissappears as in transition_time. Instead of using shadow_wake(), let’s use shadow_mark() to the animated plot to keep the past views visible.\nggplot(data = avocado_region_long, mapping = aes(x = size, y = volume, color = size)) + geom_boxplot() + theme_classic() + scale_y_continuous(labels = scales::comma_format()) + labs(title = \u0026quot;Boxplot of volume sold by Avocado Size\u0026quot;) + transition_states(size, state_length = 1, transition_length = 1) + shadow_mark(alpha = 0.3, size = 0.5)  Let’s also save this, since each time we run the code it takes some time.\nanim_save(filename = \u0026quot;type_state.gif\u0026quot;) Challenge answers: Challenge 1: Take a few minutes to try and plot the changes in total volume across time for the different regions of the USA.\nggplot(data = filter(avocado_region, type == \u0026quot;organic\u0026quot;), aes(x = Date, y = `Total Volume`, color = region)) + geom_line() + theme_minimal() + labs(title = \u0026quot;Average Price of US Avocados\u0026quot;, caption = \u0026quot;Source: Kaggle\u0026quot;, subtitle = \u0026quot;Date: {frame_along}\u0026quot;) + transition_reveal(Date) anim_save(\u0026quot;challenge_1.gif\u0026quot;) Challenge 2: Can you use transition_time to show how the price of organic avocados change over time for California?\nggplot(data = filter(avocado_CA, type == \u0026quot;organic\u0026quot;), mapping = aes(x = Date, y = AveragePrice)) + scale_y_continuous(labels = scales::dollar_format()) + geom_point(alpha = .6) + theme_minimal() + theme(legend.position = \u0026quot;none\u0026quot;) + labs(title = \u0026quot;The fluctuating price of organic avocados in California\u0026quot;, subtitle = \u0026quot;Date: {frame_time}\u0026quot;) + transition_time(Date) + shadow_wake(wake_length = 0.2) anim_save(\u0026quot;challenge_2.gif\u0026quot;)   ","date":1590459194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590459194,"objectID":"cc72af56543e53a0ac867dee59ba1da4","permalink":"/post/2020-05-25-gganimate/2020-05-25-gganimate/","publishdate":"2020-05-25T21:13:14-05:00","relpermalink":"/post/2020-05-25-gganimate/2020-05-25-gganimate/","section":"post","summary":"Animating your ggplots may sound daunting. However, you have to add a line or two extra of code and you have an animation! gganimate makes animation quite accessible for users of ggplot.","tags":["Workshop"],"title":"gganimate: A Lesson with Avocados","type":"post"},{"authors":null,"categories":null,"content":" Which states have been most impacted by unemployment due to the 2020 Coronavirus pandemic? To investigate this, I use the Bureau of Labor Statistics API and some special R ggplot extensions to visualize this relationship with sparklines and small multiples.\nLoad Packages if (!require(\u0026quot;pacman\u0026quot;)) install.packages(\u0026quot;pacman\u0026quot;) ## Loading required package: pacman pacman::p_load(blscrapeR, geofacet, tidyverse, scales, here) # For Windows computers, load font devices here: # extrafont::loadfonts(device = \u0026quot;win\u0026quot;, quiet = TRUE) Now, scrape the 2020 monthly unemployment data with the Bureau of Labor Statistics API. This isn’t pretty, particularly because each of the “LASST” links is somewhat randomly named and does not import the state name.\nbls \u0026lt;- bls_api(\u0026quot;LASST010000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Alabama\u0026quot;) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST020000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Alaska\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST040000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Arizona\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST050000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Arkansas\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST060000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;California\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST080000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Colorado\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST090000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Connecticut\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST100000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Delaware\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST110000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;District of Columbia\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST120000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Florida\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST130000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Georgia\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST150000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Hawaii\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST160000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Idaho\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST170000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Illinois\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST180000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Indiana\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST190000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Iowa\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST200000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Kansas\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST210000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Kentucky\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST220000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Louisiana\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST230000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Maine\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST240000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Maryland\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST250000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Massachusetts\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST260000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Michigan\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST270000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Minnesota\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST280000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Mississippi\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST290000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Missouri\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST300000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Montana\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST310000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Nebraska\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST320000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Nevada\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST330000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;New_Hampshire\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST340000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;New_Jersey\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST350000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;New_Mexico\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST360000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;New_York\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST370000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;North_Carolina\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST380000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;North_Dakota\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST390000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Ohio\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST400000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Oklahoma\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST410000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Oregon\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST420000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Pennsylvania\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST440000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Rhode_Island\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST450000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;South_Carolina\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST460000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;South_Dakota\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST470000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Tennessee\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST480000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Texas\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST490000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Utah\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST500000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Vermont\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST510000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Virginia\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST530000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Washington\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST540000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;West_Virginia\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST550000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Wisconsin\u0026quot;)) %\u0026gt;% bind_rows(bls_api(\u0026quot;LASST560000000000003\u0026quot;, startyear = 2020, endyear = 2020) %\u0026gt;% mutate(state = \u0026quot;Wyoming\u0026quot;)) %\u0026gt;% dplyr::select(-c(year,period, latest, footnotes,seriesID)) write_csv(bls, path = \u0026quot;bls_July.csv\u0026quot;) # save the data, as you have limited daily queries!  Alternatively, I already have this data saved, so I’ll import it here instead:\nbls \u0026lt;- read_csv(\u0026quot;bls_July.csv\u0026quot;)  ## Parsed with column specification: ## cols( ## periodName = col_character(), ## value = col_double(), ## state = col_character() ## ) bls \u0026lt;- bls %\u0026gt;% pivot_wider(id_cols = \u0026quot;state\u0026quot;, names_from = periodName, values_from = value) %\u0026gt;% # change from long for to wide form rowwise() %\u0026gt;% mutate(row_max = max(January:June), # calculate maximum unemployment by state row_min = min(January:June), # calculate minimum unemployment by state diff = (row_max - row_min)/100) %\u0026gt;% # calculate the difference between max and min for color plotting pivot_longer(cols = -c(state, diff, row_max, row_min), names_to = \u0026quot;month\u0026quot;, values_to = \u0026quot;value\u0026quot;) %\u0026gt;% # switch back to long form for plotting mutate(month = fct_relevel(as.factor(month), c(\u0026quot;January\u0026quot;, \u0026quot;February\u0026quot;, \u0026quot;March\u0026quot;, \u0026quot;April\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;June\u0026quot;)), # turn the month into a factor and reorder it state = str_replace(state, \u0026quot;_\u0026quot;, \u0026quot; \u0026quot;), # replace the \u0026quot;_\u0026quot; in the state names with spaces value = value / 100) # to probably render the percents And now, plot! Not the faceting over approximate state locations with the geofacet package.\nunempl_plot \u0026lt;- ggplot(bls, aes(x=month, y = value, group = state)) + geom_line(aes(color = diff), size = 2) + scale_color_gradient(name = \u0026quot;Max Rise in\\nUnemployment\u0026quot;, low = \u0026quot;#fffeea\u0026quot;, high = \u0026quot;#c03728\u0026quot;, label = label_percent(accuracy = 1, trim = FALSE)) + theme_minimal(base_family = \u0026quot;Roboto Condensed\u0026quot;, base_size = 14) + theme(axis.text = element_blank(), axis.title = element_text(family = \u0026quot;Roboto Condensed Light\u0026quot;), panel.grid = element_blank(), panel.border = element_blank(), legend.position = c(.9,.3), legend.title = element_text(size = 8, family = \u0026quot;Roboto Condensed Light\u0026quot;), strip.text = element_text(size = 12, \u0026quot;Roboto Condensed Light\u0026quot;), legend.text = element_text(size = 10)) + facet_geo(~ state, grid = \u0026quot;us_state_grid2\u0026quot;, label = \u0026quot;code\u0026quot;) + labs(title = \u0026quot;Which states have the sharpest increase in unemployment due to COVID-19?\u0026quot;, caption = \u0026quot;Source: Bureau of Labor Statistics\\ngithub.com/kelseygonzalez\u0026quot;, x = \u0026quot;Month of 2020 (January - June)\u0026quot;, y = \u0026quot;Unemployment Rate\u0026quot;) ggsave(\u0026quot;bls_unemployment.png\u0026quot;, plot = unempl_plot, width = 10, height = 6)  ","date":1590278400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590278400,"objectID":"1aae7cecfc84cb57865f25e939158721","permalink":"/project/2020-05-24-coronavirus-unemployment/coronavirus-unemployment/","publishdate":"2020-05-24T00:00:00Z","relpermalink":"/project/2020-05-24-coronavirus-unemployment/coronavirus-unemployment/","section":"project","summary":"Which states have been most impacted by unemployment due to the 2020 Coronavirus pandemic? To investigate this, I use the Bureau of Labor Statistics API and some special R ggplot extensions to visualize this relationship with sparklines and small multiples.","tags":null,"title":"Coronavirus Unemployment","type":"project"},{"authors":null,"categories":[],"content":" With Tidy Tuesday 2020-08-04, I use a dataset of European energy sources to explore the similarity of country energy sources by source and size.\nload packages\nif (!require(\u0026quot;pacman\u0026quot;)) install.packages(\u0026quot;pacman\u0026quot;) ## Loading required package: pacman pacman::p_load(tidytuesdayR, factoextra, ggdendro, dendextend, tidyverse, patchwork) load and wrangle data\ntuesdata \u0026lt;- tidytuesdayR::tt_load(2020, week = 32) ## --- Compiling #TidyTuesday Information for 2020-08-04 ---- ## --- There are 2 files available --- ## --- Starting Download --- ## ## Downloading file 1 of 2: `energy_types.csv` ## Downloading file 2 of 2: `country_totals.csv` ## --- Download complete --- totals \u0026lt;- tuesdata$energy_types %\u0026gt;% filter(country != \u0026quot;EL\u0026quot;, !is.na(country_name), level != \u0026quot;Level 2\u0026quot;) %\u0026gt;% select(country_name, type, `2016`) %\u0026gt;% pivot_wider(id_cols = country_name, names_from = type, values_from = `2016`) %\u0026gt;% rowwise() %\u0026gt;% mutate(total = rowSums(across(`Conventional thermal`:Other)), across(`Conventional thermal`:Other, ~ . / total)) props \u0026lt;- totals %\u0026gt;% select(-total) %\u0026gt;% column_to_rownames(\u0026quot;country_name\u0026quot;) %\u0026gt;% as.matrix() %\u0026gt;% scale() totals \u0026lt;- totals %\u0026gt;% select(name = country_name, total) Perform hierarchical clustering\nhc1 \u0026lt;- hclust(dist(props), method = \u0026quot;ward.D2\u0026quot; ) sub_grp \u0026lt;- cutree(hc1, k = 5) Render plot A:\nplota \u0026lt;- hc1 %\u0026gt;% as.dendrogram %\u0026gt;% set(\u0026quot;branches_k_color\u0026quot;, value = c(\u0026quot;#43aa8b\u0026quot;, \u0026quot;#577590\u0026quot;,\u0026quot;#f3722c\u0026quot;,\u0026quot;#f94144\u0026quot;,\u0026quot;#90be6d\u0026quot;), k = 5) %\u0026gt;% set(\u0026quot;labels_col\u0026quot;, value = c(\u0026quot;#43aa8b\u0026quot;, \u0026quot;#577590\u0026quot;,\u0026quot;#f3722c\u0026quot;,\u0026quot;#f94144\u0026quot;,\u0026quot;#90be6d\u0026quot;), k = 5) %\u0026gt;% set(\u0026quot;labels_cex\u0026quot;, 0.5) %\u0026gt;% set(\u0026quot;branches_lwd\u0026quot;, 0.5) %\u0026gt;% as.ggdend() %\u0026gt;% ggplot(horiz = TRUE) + theme(axis.text.y = element_text(size=1)) + theme_minimal(base_family = \u0026quot;Roboto Condensed\u0026quot;, base_size = 14) + theme(axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), panel.border = element_blank(), legend.position = \u0026quot;none\u0026quot;) plota Render plot B:\nclusters \u0026lt;- fviz_cluster(list(data = props, cluster = sub_grp), repel = TRUE, outlier.color = \u0026quot;black\u0026quot;, ggtheme = theme_minimal()) plotb \u0026lt;- clusters$data %\u0026gt;% left_join(totals) %\u0026gt;% ggplot(aes(x, y, color = cluster)) + geom_point(aes(size = total), alpha = 0.5) + ggrepel::geom_text_repel(aes(label = name), size = 2) + scale_color_manual(values = c(\u0026quot;#f94144\u0026quot;, \u0026quot;#f3722c\u0026quot;, \u0026quot;#90be6d\u0026quot;, \u0026quot;#577590\u0026quot;, \u0026quot;#43aa8b\u0026quot;)) + theme_minimal() + theme(axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), panel.border = element_blank(), legend.position = \u0026quot;none\u0026quot;) ## Joining, by = \u0026quot;name\u0026quot; plotb Combine plots A \u0026amp; B with patchwork:\nplota + plotb + plot_annotation( title = \u0026#39;How similar are European countries in energy usage and source?\u0026#39;, subtitle = \u0026#39;2016 European energy usage clustered by source concentration\u0026#39;, caption = \u0026#39;Data: Eurostat Energy \\n Design and Analysis by @KelseyGonzalez\u0026#39;) + theme_minimal(base_family = \u0026quot;Roboto Condensed\u0026quot;, base_size = 14) + theme(axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), panel.border = element_blank(), legend.position = \u0026quot;none\u0026quot;) # save plot ggsave(\u0026quot;2020-08-04.png\u0026quot;) ## Saving 7 x 5 in image ","date":1590278400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590278400,"objectID":"122320b64e3feb1038a3d514a6c44e3e","permalink":"/project/2020-08-04-energy/energy/","publishdate":"2020-05-24T00:00:00Z","relpermalink":"/project/2020-08-04-energy/energy/","section":"project","summary":"With Tidy Tuesday 2020-08-04, I use a dataset of European energy sources to explore the similarity of country energy sources by source and size. ","tags":[],"title":"European Energy Consumption","type":"project"},{"authors":["Coulter, Kiera","Sabo, Samantha","Martínez, Daniel E","Chisholm, Katelyn","Kelsey E. Gonzalez","Bass Zavala, Sonia","Villalobos, Edrick","Garcia, Diego","Levy, Taylor","Slack, Jeremy"],"categories":null,"content":"Supplementary notes can be added here, including code and math.\n","date":1587513600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587513600,"objectID":"fb6558e01b2e0569b0249b0ffd73cea1","permalink":"/publication/unaccompaniedminors/","publishdate":"2020-04-22T00:00:00Z","relpermalink":"/publication/unaccompaniedminors/","section":"publication","summary":"The routine human rights abuses and due process violations ofunaccompanied alien children (UAC) by USCustoms and Border Protection (CBP) have contributed to a mounting humanitarian and legal crisis along the US–Mexico border. In the United States, the treatment of UAC is governed by laws, policies, and standards drawn from the Flores Settlement, the Trafficking Victims Protection Reauthorization Act (TVPRA), and CBP procedures and directives, which are intended to ensure UAC’s protection, well-being, and ability to pursue relief from removal, such as asylum. As nongovernmental organizations and human rights groups have documented, however, CBP has repeatedly violated these legal standards and policies, and subjectedUAC to abuses and rights violations. This article draws from surveys of 97 recently deported Mexican UAC, which examine their experiences with US immigration authorities. The study finds that Mexican UAC are detained in subpar conditions, are routinely not screened for fear of return to their home countries or for human trafficking, and are not sufficiently informed about the deportation process. The article recommends that CBP should take immediate steps to improve the treatment of UAC, that CBP and other entities responsible for the care ofUAC be monitored to ensure their compliance with US law and policy, and that Mexican UAC be afforded the same procedures and protection under the TVPRA as UAC from noncontiguous states.","tags":null,"title":"A Study and Analysis of the Treatment of Mexican Unaccompanied Minors by Customs and Border Protection","type":"publication"},{"authors":["Daniel E. Martínez","Kelsey E. Gonzalez"],"categories":null,"content":"","date":1587168000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587168000,"objectID":"a37f0c256070d8edb5eaf2a2157c4845","permalink":"/publication/primarypanethnicity/","publishdate":"2020-04-18T00:00:00Z","relpermalink":"/publication/primarypanethnicity/","section":"publication","summary":"Research finds willingness to identify on panethnic terms is increasing among people of Latin American descent in the United States, as is the assertion of Latino-Hispanic panethnicity as a primary identity. The 2013 National Survey of Latinos found that one-fifth of respondents identified most often as “Hispanic/Latino” rather than with a “Hispanic origin term” or as “American”. Drawing on these data, we examine the sociodemographic factors associated with primary panethnic identification (PPI). We find that Democratic Party affiliation and Mexican heritage increase the overall likelihood of PPI. Having less than a high school education, identifying racially as “Hispanic/Latino” or “other race”, Spanish fluency, being a first-generation immigrant, and non-citizenship increase the likelihood of PPI over “American”. These results suggest Latino-Hispanic panethnicity may represent a reactive identity associated with politicization, marginalization, and racialization. Many Latino-Hispanics in the United States are opting for a racialized primary panethnic identity over an “American” identity.","tags":null,"title":"Panethnicity as a reactive identity: primary panethnic identification among Latino-Hispanics in the United States","type":"publication"},{"authors":null,"categories":null,"content":"This visualization aims to understand population behavior during the COVID-19 pandemic. I use aggregated human mobility data (how far people move each day) from Cuebiq, an offline intelligence and measurement marketing company, which partners with 86 apps to collect first-party location data. Different U.S. states have handled the Covid-19 Pandemic in vastly different ways, with some states still refraining from issuing stay-at-home orders. This has led to very different mobility behaviors by state. I show that the stay-at-home order successfully reduced movement during the week of March 23rd and April 13th, with Americans reverting towards pre-COVID-19 movement patterns in between.\nThis visualization won the University of Arizona Library Data Visualization Contest. Learn more here: https://new.library.arizona.edu/news/2020-data-visualization-challenge-winners\nData is available at https://www.cuebiq.com/visitation-insights-covid19/\nSource Code is available at https://github.com/kelseygonzalez/covid_mobility\na doi for this visualization is available at https://doi.org/10.25422/azu.data.12374810.v1\n","date":1586908800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586908800,"objectID":"f4ffc4ac750a995de2a6664311d08a74","permalink":"/project/2020-05-18-covidmobility/mobility/","publishdate":"2020-04-15T00:00:00Z","relpermalink":"/project/2020-05-18-covidmobility/mobility/","section":"project","summary":"This visualization aims to understand population behavior during the COVID-19 pandemic. I use aggregated human mobility data (how far people move each day) from Cuebiq, an offline intelligence and measurement marketing company, which partners with 86 apps to collect first-party location data.","tags":null,"title":"Coronavirus Mobility","type":"project"},{"authors":null,"categories":null,"content":"","date":1579046400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579046400,"objectID":"7e2f0c1dde10322a42e1e59f838df2e1","permalink":"/post/2020-01-15-dc-brynmawr/","publishdate":"2020-01-15T00:00:00Z","relpermalink":"/post/2020-01-15-dc-brynmawr/","section":"post","summary":"2020-01-15 Data Carpentry workshop at Bryn Mawr College teaching the R for Social Science workshop","tags":["Demo"],"title":"2020-01-15 Data Carpentry R for Social Science","type":"post"},{"authors":null,"categories":null,"content":"","date":1572048000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572048000,"objectID":"a0baf15481811516c8b7fda614d6234b","permalink":"/post/2019-10-26-swc-tucson/","publishdate":"2019-10-26T00:00:00Z","relpermalink":"/post/2019-10-26-swc-tucson/","section":"post","summary":"2019-10-26 Software Carpentry workshop at the University of Arizona teaching the R for Reproducible Scientific Analysis workshop","tags":["Demo"],"title":"2019-10-26 Software Carpentry R for Reproducible Scientific Analysis","type":"post"},{"authors":null,"categories":null,"content":"","date":1562803200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562803200,"objectID":"021ebed55baee08dbb914760ee6c28a1","permalink":"/course/soc101/soc101/","publishdate":"2019-07-11T00:00:00Z","relpermalink":"/course/soc101/soc101/","section":"course","summary":"Introduction to Sociology","tags":["Demo"],"title":"Soc 101: Introduction to Sociology","type":"course"}]